import type { Post } from "../types/post";

export const mockPosts: Post[] = [
  {
    id: "1",
    title: "Mastering Arrays in DSA",
    description: "Learn how arrays work as the base of DSA.",
    content: "Arrays provide random access and are the foundation of many algorithms.",
    code: `int[] arr = {1,2,3}; Console.WriteLine(arr[0]);`,
    createdAt: "2025-01-01T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: ["DSA", "C#"],
  },
  {
    id: "2",
    title: "Linked List Implementation in JavaScript",
    description: "Singly Linked List implementation in JS.",
    content: "Linked lists allow dynamic memory usage unlike arrays.",
    code: `class Node { constructor(v){ this.val=v; this.next=null; } }`,
    createdAt: "2025-01-02T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: ["DSA", "JavaScript"],
  },
  {
    id: "3",
    title: "Stack vs Queue",
    description: "Stack (LIFO) vs Queue (FIFO).",
    content: "Stacks are good for recursion, queues for scheduling.",
    code: `Queue<int> q = new Queue<int>(); q.Enqueue(1);`,
    createdAt: "2025-01-03T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: ["DSA"],
  },
  {
    id: "4",
    title: "Binary Search in C#",
    description: "Efficient search in sorted arrays.",
    content: "Binary search has O(log n) complexity.",
    code: `int BinarySearch(int[] arr,int target){ ... }`,
    createdAt: "2025-01-04T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: ["DSA", "Algorithms"],
  },
  {
    id: "5",
    title: "Merge Sort Algorithm",
    description: "Divide and conquer sorting.",
    content: "Merge sort splits and merges arrays efficiently.",
    code: `void MergeSort(int[] arr,int l,int r){ ... }`,
    createdAt: "2025-01-05T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: ["DSA", "Sorting"],
  },
  {
    id: "6",
    title: "Quick Sort Algorithm",
    description: "Partition-based sorting.",
    content: "Quick sort picks a pivot and partitions elements.",
    code: `void QuickSort(int[] arr,int low,int high){ ... }`,
    createdAt: "2025-01-06T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: ["DSA", "Sorting"],
  },
  {
    id: "7",
    title: "Dynamic Programming Basics",
    description: "Solve overlapping subproblems efficiently.",
    content: "DP stores results to avoid recomputation.",
    code: `int Fib(int n, int[] memo){ if(n<=1) return n; if(memo[n]!=0) return memo[n]; return memo[n]=Fib(n-1,memo)+Fib(n-2,memo); }`,
    createdAt: "2025-01-07T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: ["DSA", "Dynamic Programming"],
  },
  {
    id: "8",
    title: "Task vs ValueTask in .NET",
    description: "Performance differences explained.",
    content: "ValueTask reduces allocations in high-performance async methods.",
    code: `public async ValueTask<int> GetDataAsync(){ return 42; }`,
    createdAt: "2025-01-08T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: [".NET", "Async"],
  },
  {
    id: "9",
    title: "Understanding Middleware in ASP.NET Core",
    description: "Middleware pipeline explained.",
    content: "Each middleware can handle requests and pass control to the next.",
    code: `app.Use(async (ctx,next)=>{ Console.WriteLine("Hello"); await next(); });`,
    createdAt: "2025-01-09T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: [".NET", "Middleware"],
  },
  {
    id: "10",
    title: "Dependency Injection in ASP.NET Core",
    description: "Built-in DI container usage.",
    content: "Register services and inject them into controllers.",
    code: `builder.Services.AddScoped<IMyService, MyService>();`,
    createdAt: "2025-01-10T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: [".NET", "DI"],
  },
  {
    id: "11",
    title: "Multithreading in .NET",
    description: "Using threads for parallel execution.",
    content: "Threads can improve performance but require synchronization.",
    code: `Thread t = new Thread(()=>Console.WriteLine("Hi")); t.Start();`,
    createdAt: "2025-01-11T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: [".NET", "Multithreading"],
  },
  {
    id: "12",
    title: "Async/Await in JavaScript",
    description: "Modern async handling.",
    content: "Async functions return promises and allow cleaner syntax.",
    code: `async function fetchData(){ let res = await fetch('/'); }`,
    createdAt: "2025-01-12T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: ["JavaScript", "Async"],
  },
  {
    id: "13",
    title: "Event Loop in JS",
    description: "Understanding microtasks vs macrotasks.",
    content: "JS executes sync code first, then processes async tasks.",
    code: `console.log("1"); setTimeout(()=>console.log("2"),0); console.log("3");`,
    createdAt: "2025-01-13T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: ["JavaScript"],
  },
  {
    id: "14",
    title: "Closures in JavaScript",
    description: "How closures capture variables.",
    content: "Closures allow inner functions to access outer variables.",
    code: `function outer(){ let x=10; return ()=>console.log(x); }`,
    createdAt: "2025-01-14T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: ["JavaScript"],
  },
  {
    id: "15",
    title: "ES6 Modules in JS",
    description: "Using import/export.",
    content: "Modules allow splitting code into reusable files.",
    code: `export function add(a,b){ return a+b; }`,
    createdAt: "2025-01-15T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: ["JavaScript", "ES6"],
  },
  {
    id: "16",
    title: "SignalR in ASP.NET Core",
    description: "Real-time communication framework.",
    content: "SignalR simplifies WebSocket connections for real-time apps.",
    code: `app.MapHub<ChatHub>("/chat");`,
    createdAt: "2025-01-16T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: [".NET", "SignalR"],
  },
  {
    id: "17",
    title: "Minimal APIs in .NET 8",
    description: "Lightweight HTTP endpoints.",
    content: "Minimal APIs reduce boilerplate compared to controllers.",
    code: `app.MapGet("/hello", ()=>"Hello World");`,
    createdAt: "2025-01-17T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: [".NET", "MinimalAPI"],
  },
  {
    id: "18",
    title: "Graph Traversal: BFS",
    description: "Breadth-first search explained.",
    content: "BFS uses queue for level-wise traversal.",
    code: `void BFS(int start){ Queue<int> q = new(); ... }`,
    createdAt: "2025-01-18T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: ["DSA", "Graphs"],
  },
  {
    id: "19",
    title: "Graph Traversal: DFS",
    description: "Depth-first search explained.",
    content: "DFS can be implemented using recursion or stack.",
    code: `void DFS(int node,bool[] visited){ ... }`,
    createdAt: "2025-01-19T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: ["DSA", "Graphs"],
  },
  {
    id: "20",
    title: "Heap Data Structure",
    description: "MinHeap and MaxHeap basics.",
    content: "Heaps are used in priority queues and heapsort.",
    code: `PriorityQueue<int,int> pq = new(); pq.Enqueue(5,5);`,
    createdAt: "2025-01-20T09:00:00Z",
    author: "Mohamed Hanifa",
    tags: ["DSA", "Heap"],
  },
];